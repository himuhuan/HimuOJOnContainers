// <auto-generated />
using System;
using HimuOJ.Services.Problems.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HimuOJ.Services.Problems.Infrastructure.Migrations
{
    [DbContext(typeof(ProblemsDbContext))]
    [Migration("20241203102158_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("problems")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("problemseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("testpointseq")
                .IncrementsBy(10);

            modelBuilder.Entity("HimuOJ.Services.Problems.Domain.AggregatesModel.ProblemAggregate.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "problemseq");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DistributorId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifyTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.ToTable("t_problems", "problems");
                });

            modelBuilder.Entity("HimuOJ.Services.Problems.Domain.AggregatesModel.ProblemAggregate.TestPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "testpointseq");

                    b.Property<string>("ExpectedOutput")
                        .HasColumnType("text");

                    b.Property<string>("Input")
                        .HasColumnType("text");

                    b.Property<int>("ProblemId")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.ToTable("t_testpoints", "problems");
                });

            modelBuilder.Entity("HimuOJ.Services.Problems.Domain.AggregatesModel.ProblemAggregate.Problem", b =>
                {
                    b.OwnsOne("HimuOJ.Services.Problems.Domain.AggregatesModel.ProblemAggregate.GuestAccessLimit", "GuestAccessLimit", b1 =>
                        {
                            b1.Property<int>("ProblemId")
                                .HasColumnType("integer");

                            b1.Property<bool>("AllowDownloadInput")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AllowDownloadOutput")
                                .HasColumnType("boolean");

                            b1.HasKey("ProblemId");

                            b1.ToTable("t_problems", "problems");

                            b1.WithOwner()
                                .HasForeignKey("ProblemId");
                        });

                    b.OwnsOne("HimuOJ.Services.Problems.Domain.AggregatesModel.ProblemAggregate.ResourceLimit", "DefaultResourceLimit", b1 =>
                        {
                            b1.Property<int>("ProblemId")
                                .HasColumnType("integer");

                            b1.Property<long>("MaxMemoryLimitByte")
                                .HasColumnType("bigint");

                            b1.Property<long>("MaxRealTimeLimitMilliseconds")
                                .HasColumnType("bigint");

                            b1.HasKey("ProblemId");

                            b1.ToTable("t_problems", "problems");

                            b1.WithOwner()
                                .HasForeignKey("ProblemId");
                        });

                    b.Navigation("DefaultResourceLimit")
                        .IsRequired();

                    b.Navigation("GuestAccessLimit")
                        .IsRequired();
                });

            modelBuilder.Entity("HimuOJ.Services.Problems.Domain.AggregatesModel.ProblemAggregate.TestPoint", b =>
                {
                    b.HasOne("HimuOJ.Services.Problems.Domain.AggregatesModel.ProblemAggregate.Problem", null)
                        .WithMany("TestPoints")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HimuOJ.Services.Problems.Domain.AggregatesModel.ProblemAggregate.Problem", b =>
                {
                    b.Navigation("TestPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
