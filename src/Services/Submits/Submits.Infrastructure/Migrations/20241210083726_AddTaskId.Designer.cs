// <auto-generated />
using System;
using HimuOJ.Services.Submits.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HimuOJ.Services.Submits.Infrastructure.Migrations
{
    [DbContext(typeof(SubmitsDbContext))]
    [Migration("20241210083726_AddTaskId")]
    partial class AddTaskId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("submits")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("submissionseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("testpointresultseq")
                .IncrementsBy(10);

            modelBuilder.Entity("HimuOJ.Services.Submits.Domain.AggregatesModel.SubmitAggregate.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "submissionseq");

                    b.Property<string>("CompilerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceCode")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StatusMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("SubmitTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubmitterId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TaskId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("CompilerName");

                    b.HasIndex("ProblemId");

                    b.HasIndex("Status");

                    b.HasIndex("SubmitTime");

                    b.HasIndex("SubmitterId");

                    b.HasIndex("TaskId");

                    b.ToTable("t_submissions", "submits");
                });

            modelBuilder.Entity("HimuOJ.Services.Submits.Domain.AggregatesModel.SubmitAggregate.TestPointResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "testpointresultseq");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer");

                    b.Property<int>("TestPointId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("TestPointId");

                    b.ToTable("t_testpoint_results", "submits");
                });

            modelBuilder.Entity("HimuOJ.Services.Submits.Domain.AggregatesModel.SubmitAggregate.Submission", b =>
                {
                    b.OwnsOne("HimuOJ.Services.Submits.Domain.AggregatesModel.SubmitAggregate.ResourceUsage", "Usage", b1 =>
                        {
                            b1.Property<int>("SubmissionId")
                                .HasColumnType("integer");

                            b1.Property<long>("UsedMemoryByte")
                                .HasColumnType("bigint")
                                .HasColumnName("UsedMemoryByte");

                            b1.Property<long>("UsedTimeMs")
                                .HasColumnType("bigint")
                                .HasColumnName("UsedTimeMs");

                            b1.HasKey("SubmissionId");

                            b1.ToTable("t_submissions", "submits");

                            b1.WithOwner()
                                .HasForeignKey("SubmissionId");
                        });

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("HimuOJ.Services.Submits.Domain.AggregatesModel.SubmitAggregate.TestPointResult", b =>
                {
                    b.HasOne("HimuOJ.Services.Submits.Domain.AggregatesModel.SubmitAggregate.Submission", null)
                        .WithMany("TestPointResults")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HimuOJ.Services.Submits.Domain.AggregatesModel.SubmitAggregate.OutputDifference", "Difference", b1 =>
                        {
                            b1.Property<int>("TestPointResultId")
                                .HasColumnType("integer");

                            b1.Property<string>("ActualOutput")
                                .HasMaxLength(10000)
                                .HasColumnType("character varying(10000)")
                                .HasColumnName("ActualOutput");

                            b1.Property<string>("ExpectedOutput")
                                .HasMaxLength(10000)
                                .HasColumnType("character varying(10000)")
                                .HasColumnName("ExpectedOutput");

                            b1.HasKey("TestPointResultId");

                            b1.ToTable("t_testpoint_results", "submits");

                            b1.WithOwner()
                                .HasForeignKey("TestPointResultId");
                        });

                    b.OwnsOne("HimuOJ.Services.Submits.Domain.AggregatesModel.SubmitAggregate.ResourceUsage", "Usage", b1 =>
                        {
                            b1.Property<int>("TestPointResultId")
                                .HasColumnType("integer");

                            b1.Property<long>("UsedMemoryByte")
                                .HasColumnType("bigint")
                                .HasColumnName("UsedMemoryByte");

                            b1.Property<long>("UsedTimeMs")
                                .HasColumnType("bigint")
                                .HasColumnName("UsedTimeMs");

                            b1.HasKey("TestPointResultId");

                            b1.ToTable("t_testpoint_results", "submits");

                            b1.WithOwner()
                                .HasForeignKey("TestPointResultId");
                        });

                    b.Navigation("Difference")
                        .IsRequired();

                    b.Navigation("Usage")
                        .IsRequired();
                });

            modelBuilder.Entity("HimuOJ.Services.Submits.Domain.AggregatesModel.SubmitAggregate.Submission", b =>
                {
                    b.Navigation("TestPointResults");
                });
#pragma warning restore 612, 618
        }
    }
}
